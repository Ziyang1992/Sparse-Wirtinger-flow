% Implementation of the Sparse Wirtinger Flow (SWF) algorithm presented in the paper 
% "Phase Retrieval via Sparse Wirtinger Flow" 
% Edited by Ziyang Yuan, and Hongxia Wang
% The input data are phaseless measurements about a random
% k sparse valued 1D signal. 
% date:2017.3.28
%% Make signal and data 
clc;
clear;
n =1000;
kr=10;          %% the sparsity of real signal 
k=25;           %% the specification sparsity
ratio=0.5;      %% the ratio between m and n
m=ratio*n;
x=randn(n,1);
loc1=randperm(n);
x(loc1(kr+1:end))=0;
A=randn(m,n);   %% the random measurement
y = abs(A*x).^2;%% the intensity of transform    
%% Initialization
% support recovery
bijiao=y'*A.^2;
[~,location1]=sort(abs(bijiao));
loc=location1(end-k+1:end);
% make initialization
A1=A;
A1=A1(:,loc);
npower_iter = 100;                          % Number of power iterations 
normest = sqrt(sum(y)/numel(y));  
z0 = randn(k,1); z0 = z0/norm(z0,'fro');    % Initial guess 
for tt = 1:npower_iter,                     % Power iterations
    ytr = y.* (abs(y) <= 3^2 * normest^2 );
    z0 = A1'*(ytr.* (A1*z0)); z0 = z0/norm(z0,'fro');
end  
z1=zeros(n,1);
z1(loc)=z0;
z = normest * z1;                           % Apply scaling 
Relerrs= norm(x - exp(-1i*angle(trace(x'*z))) * z, 'fro')/norm(x,'fro'); % Initial relative error
%% Loop
% Hard thresholding based gradient descent 
T = 1000;                           % Max number of iterations
tau0 = 330;                         % constant for step size
mu = @(t) min(1-exp(-(t+39)/tau0), 0.22); % Schedule for step size
for t = 1:T,
    yz = A*z;
    grad  = 1/m* A'*( ( abs(yz).^2-y ) .* yz ); % Wirtinger gradient
    z = z - mu(t)/normest^2 * grad;             % Gradient update 
    [~,location]=sort(abs(z));                  % Hard thresholding
    z(location(1:(n-k)))=0;
    Relerrs=[Relerrs,norm(x - exp(-1i*angle(trace(x'*z))) * z, 'fro')/norm(x,'fro')];
    if(min(Relerrs)<10^-5)
        break;
    end
end
figure, semilogy(1:length(Relerrs),Relerrs)
 fprintf('Relative error after initialization: %f\n', Relerrs(1))
 fprintf('Relative error after %d iterations: %f\n', T, Relerrs(end))
 xlabel('Iteration'), ylabel('Relative error (log10)'), ...
     title('Relative error vs iteration count')